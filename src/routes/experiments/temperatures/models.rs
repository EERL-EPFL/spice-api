//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "temperature_readings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub experiment_id: Uuid,
    pub timestamp: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Text", nullable)]
    pub image_filename: Option<String>,
    pub probe_1: Option<Decimal>,
    pub probe_2: Option<Decimal>,
    pub probe_3: Option<Decimal>,
    pub probe_4: Option<Decimal>,
    pub probe_5: Option<Decimal>,
    pub probe_6: Option<Decimal>,
    pub probe_7: Option<Decimal>,
    pub probe_8: Option<Decimal>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::experiments::Entity",
        from = "Column::ExperimentId",
        to = "super::experiments::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Experiments,
    #[sea_orm(has_many = "super::well_phase_transitions::Entity")]
    WellPhaseTransitions,
}

impl Related<super::experiments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Experiments.def()
    }
}

impl Related<super::well_phase_transitions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WellPhaseTransitions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
