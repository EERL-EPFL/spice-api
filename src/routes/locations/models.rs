//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use chrono::{DateTime, Utc};
use crudcrate::{CRUDResource, EntityToModels};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, EntityToModels)]
#[sea_orm(table_name = "locations")]
#[crudcrate(
    generate_router,
    api_struct = "Location",
    name_singular = "location",
    name_plural = "locations",
    description = "Locations represent physical places where experiments are conducted. Each location belongs to a project and can contain multiple samples and experiments."
)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[crudcrate(primary_key, update_model = false, create_model = false, on_create = Uuid::new_v4())]
    pub id: Uuid,
    #[sea_orm(unique)]
    #[crudcrate(sortable, filterable, fulltext)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    #[crudcrate(sortable, filterable, fulltext)]
    pub comment: Option<String>,
    #[crudcrate(sortable, filterable)]
    pub project_id: Option<Uuid>,
    #[crudcrate(update_model = false, create_model = false, on_create = chrono::Utc::now(), sortable)]
    pub created_at: DateTime<Utc>,
    #[crudcrate(update_model = false, create_model = false, on_update = chrono::Utc::now(), on_create = chrono::Utc::now(), sortable)]
    pub last_updated: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "crate::routes::projects::models::Entity",
        from = "Column::ProjectId",
        to = "crate::routes::projects::models::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Projects,
    #[sea_orm(has_many = "crate::routes::samples::models::Entity")]
    Samples,
}

impl Related<crate::routes::projects::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<crate::routes::samples::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Samples.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
