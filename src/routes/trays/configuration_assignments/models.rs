//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use chrono::{DateTime, Utc};
use crudcrate::{CRUDResource, EntityToModels};
use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tray_configuration_assignments")]
// #[crudcrate(
//     generate_router,
//     api_struct = "TrayConfigurationAssignment",
//     name_singular = "tray_configuration_assignment",
//     name_plural = "tray_configuration_assignments",
//     description = "Links tray configurations to specific trays with positional and rotational information."
// )]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    // #[crudcrate(sortable, filterable)]
    pub tray_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    // #[crudcrate(sortable, filterable)]
    pub tray_configuration_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    // #[crudcrate(sortable, filterable)]
    pub order_sequence: i32,
    // #[crudcrate(sortable, filterable)]
    pub rotation_degrees: i32,
    // #[crudcrate(update_model = false, create_model = false, on_create = chrono::Utc::now(), sortable, list_model=false)]
    pub created_at: DateTime<Utc>,
    // #[crudcrate(update_model = false, create_model = false, on_update = chrono::Utc::now(), on_create = chrono::Utc::now(), sortable, list_model=false)]
    pub last_updated: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "crate::routes::trays::configurations::models::Entity",
        from = "Column::TrayConfigurationId",
        to = "crate::routes::trays::configurations::models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TrayConfigurations,
    #[sea_orm(
        belongs_to = "crate::routes::trays::models::Entity",
        from = "Column::TrayId",
        to = "crate::routes::trays::models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Trays,
}

impl Related<crate::routes::trays::configurations::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrayConfigurations.def()
    }
}

impl Related<crate::routes::trays::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trays.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
