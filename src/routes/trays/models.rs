//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "trays")]
pub struct Model {
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    pub qty_x_axis: Option<i32>,
    pub qty_y_axis: Option<i32>,
    pub well_relative_diameter: Option<Decimal>,
    pub last_updated: DateTimeWithTimeZone,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::routes::trays::configuration_assignments::models::Entity")]
    TrayConfigurationAssignments,
    #[sea_orm(has_many = "crate::routes::trays::wells::models::Entity")]
    Wells,
}

impl Related<crate::routes::trays::configuration_assignments::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrayConfigurationAssignments.def()
    }
}

impl Related<crate::routes::trays::wells::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wells.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
