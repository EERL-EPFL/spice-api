//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use chrono::{DateTime, Utc};
use crudcrate::{CRUDResource, EntityToModels};
use rust_decimal::Decimal;
use sea_orm::{
    DatabaseConnection, EntityTrait, Set, TransactionTrait,
    entity::prelude::*, prelude::Expr,
};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, EntityToModels)]
#[sea_orm(table_name = "trays")]
#[crudcrate(
    generate_router,
    api_struct = "Tray",
    name_singular = "tray",
    name_plural = "trays",
    description = "This endpoint manages individual trays used in experiments.",
)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[crudcrate(primary_key, update_model = false, create_model = false, on_create = Uuid::new_v4())]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    #[crudcrate(sortable, filterable, fulltext)]
    pub name: Option<String>,
    #[crudcrate(sortable, filterable)]
    pub qty_x_axis: Option<i32>,
    #[crudcrate(sortable, filterable)]
    pub qty_y_axis: Option<i32>,
    #[crudcrate(sortable, filterable)]
    pub well_relative_diameter: Option<Decimal>,
    #[crudcrate(update_model = false, create_model = false, on_create = chrono::Utc::now(), sortable, list_model=false)]
    pub created_at: DateTime<Utc>,
    #[crudcrate(update_model = false, create_model = false, on_update = chrono::Utc::now(), on_create = chrono::Utc::now(), sortable, list_model=false)]
    pub last_updated: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::routes::trays::configuration_assignments::models::Entity")]
    TrayConfigurationAssignments,
    #[sea_orm(has_many = "crate::routes::trays::wells::models::Entity")]
    Wells,
}

impl Related<crate::routes::trays::configuration_assignments::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrayConfigurationAssignments.def()
    }
}

impl Related<crate::routes::trays::wells::models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wells.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
