//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "time_points")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub experiment_id: Uuid,
    pub timestamp: DateTimeWithTimeZone,
    pub image_filename: Option<String>,
    pub asset_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::experiments::Entity",
        from = "Column::ExperimentId",
        to = "super::experiments::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Experiments,
    #[sea_orm(
        belongs_to = "super::s3_assets::Entity",
        from = "Column::AssetId",
        to = "super::s3_assets::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    S3Assets,
    #[sea_orm(has_many = "super::time_point_temperatures::Entity")]
    TimePointTemperatures,
    #[sea_orm(has_many = "super::time_point_well_states::Entity")]
    TimePointWellStates,
}

impl Related<super::experiments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Experiments.def()
    }
}

impl Related<super::s3_assets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::S3Assets.def()
    }
}

impl Related<super::time_point_temperatures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimePointTemperatures.def()
    }
}

impl Related<super::time_point_well_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimePointWellStates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
