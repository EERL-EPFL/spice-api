//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "phase_change_events")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub experiment_id: Uuid,
    pub tray_id: Uuid,
    pub tray_sequence: i32,
    pub well_row: i32,
    pub well_column: i32,
    pub well_coordinate: String,
    pub phase_state: i32,
    pub previous_state: Option<i32>,
    pub timestamp: DateTimeWithTimeZone,
    pub region_id: Option<Uuid>,
    pub asset_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
    pub last_updated: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::experiments::Entity",
        from = "Column::ExperimentId",
        to = "super::experiments::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Experiments,
    #[sea_orm(has_many = "super::phase_change_temperatures::Entity")]
    PhaseChangeTemperatures,
    #[sea_orm(
        belongs_to = "super::regions::Entity",
        from = "Column::RegionId",
        to = "super::regions::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Regions,
    #[sea_orm(
        belongs_to = "super::s3_assets::Entity",
        from = "Column::AssetId",
        to = "super::s3_assets::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    S3Assets,
    #[sea_orm(
        belongs_to = "super::trays::Entity",
        from = "Column::TrayId",
        to = "super::trays::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Trays,
}

impl Related<super::experiments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Experiments.def()
    }
}

impl Related<super::phase_change_temperatures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhaseChangeTemperatures.def()
    }
}

impl Related<super::regions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Regions.def()
    }
}

impl Related<super::s3_assets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::S3Assets.def()
    }
}

impl Related<super::trays::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trays.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
