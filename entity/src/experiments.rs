//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "experiments")]
pub struct Model {
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub username: Option<String>,
    pub performed_at: Option<DateTimeWithTimeZone>,
    pub temperature_ramp: Option<Decimal>,
    pub temperature_start: Option<Decimal>,
    pub temperature_end: Option<Decimal>,
    pub is_calibration: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub remarks: Option<String>,
    pub tray_configuration_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
    pub last_updated: DateTimeWithTimeZone,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::phase_change_events::Entity")]
    PhaseChangeEvents,
    #[sea_orm(has_many = "super::regions::Entity")]
    Regions,
    #[sea_orm(has_many = "super::s3_assets::Entity")]
    S3Assets,
    #[sea_orm(has_many = "super::temperature_probe_configurations::Entity")]
    TemperatureProbeConfigurations,
    #[sea_orm(has_many = "super::temperature_probes::Entity")]
    TemperatureProbes,
    #[sea_orm(has_many = "super::temperature_readings::Entity")]
    TemperatureReadings,
    #[sea_orm(has_many = "super::time_points::Entity")]
    TimePoints,
    #[sea_orm(
        belongs_to = "super::tray_configurations::Entity",
        from = "Column::TrayConfigurationId",
        to = "super::tray_configurations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TrayConfigurations,
    #[sea_orm(has_many = "super::well_phase_transitions::Entity")]
    WellPhaseTransitions,
}

impl Related<super::phase_change_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhaseChangeEvents.def()
    }
}

impl Related<super::regions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Regions.def()
    }
}

impl Related<super::s3_assets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::S3Assets.def()
    }
}

impl Related<super::temperature_probe_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TemperatureProbeConfigurations.def()
    }
}

impl Related<super::temperature_probes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TemperatureProbes.def()
    }
}

impl Related<super::temperature_readings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TemperatureReadings.def()
    }
}

impl Related<super::time_points::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimePoints.def()
    }
}

impl Related<super::tray_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrayConfigurations.def()
    }
}

impl Related<super::well_phase_transitions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WellPhaseTransitions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
