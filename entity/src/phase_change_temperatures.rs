//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "phase_change_temperatures")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub phase_change_event_id: Uuid,
    pub probe_number: i32,
    pub probe_column_index: i32,
    pub temperature_celsius: Decimal,
    pub probe_position_x: Option<Decimal>,
    pub probe_position_y: Option<Decimal>,
    pub correction_slope: Option<Decimal>,
    pub correction_intercept: Option<Decimal>,
    pub corrected_temperature: Option<Decimal>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::phase_change_events::Entity",
        from = "Column::PhaseChangeEventId",
        to = "super::phase_change_events::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PhaseChangeEvents,
}

impl Related<super::phase_change_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhaseChangeEvents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
