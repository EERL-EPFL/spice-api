//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "temperature_probe_configurations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub experiment_id: Uuid,
    pub probe_number: i32,
    pub column_index: i32,
    pub position_x: Decimal,
    pub position_y: Decimal,
    #[sea_orm(column_type = "Decimal(Some((16, 10)))")]
    pub correction_slope: Decimal,
    #[sea_orm(column_type = "Decimal(Some((16, 10)))")]
    pub correction_intercept: Decimal,
    pub interpolation_method: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub last_updated: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::experiments::Entity",
        from = "Column::ExperimentId",
        to = "super::experiments::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Experiments,
}

impl Related<super::experiments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Experiments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
