//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use chrono::{DateTime, Utc};
use crudcrate::{CRUDResource, EntityToModels};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, EntityToModels)]
#[sea_orm(table_name = "projects")]
#[crudcrate(
    generate_router,
    api_struct = "Project",
    name_singular = "project",
    name_plural = "projects",
    description = "Projects provide a way to organize locations hierarchically. Each project can contain multiple locations and provides visual organization through color coding."
)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[crudcrate(primary_key, update_model = false, create_model = false, on_create = Uuid::new_v4())]
    pub id: Uuid,
    #[sea_orm(unique)]
    #[crudcrate(sortable, filterable, fulltext)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    #[crudcrate(sortable, filterable, fulltext)]
    pub note: Option<String>,
    #[crudcrate(sortable, filterable, fulltext)]
    pub colour: Option<String>,
    #[crudcrate(update_model = false, create_model = false, on_create = chrono::Utc::now(), sortable)]
    pub created_at: DateTime<Utc>,
    #[crudcrate(update_model = false, create_model = false, on_update = chrono::Utc::now(), on_create = chrono::Utc::now(), sortable)]
    pub last_updated: DateTime<Utc>,
    // #[crudcrate(non_db_attr = true, default = vec![])]
    // pub locations: Vec<crate::routes::campaigns::models::Location>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::locations::Entity")]
    Locations,
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
